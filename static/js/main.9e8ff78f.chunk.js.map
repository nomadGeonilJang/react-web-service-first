{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref","poster","title","react_default","a","createElement","className","src","alt","concat","Movie","_ref2","genres","synopsis","map","genre","i","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","_useState","useState","_useState2","Object","slicedToArray","movies","setMovies","useEffect","_getMovies","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_callAPI","sent","stop","apply","this","arguments","fetch","then","res","json","data","catch","e","console","error","movie","index","src_Movie","id","medium_cover_image","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAMA,SAASA,EAATC,GAAqC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,MAC5B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAeC,IAAKN,EAAQO,IAAG,GAAAC,OAAKP,EAAL,mBAsCxCQ,MA/Bf,SAAAC,GAAiD,IAAjCT,EAAiCS,EAAjCT,MAAOD,EAA0BU,EAA1BV,OAAQW,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACrC,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,MAAOA,KAEtCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKH,GACLC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZM,EAAOE,IAAI,SAACC,EAAOC,GAAR,OAAcb,EAAAC,EAAAC,cAAA,QAAMY,IAAKD,EAAGV,UAAU,gBAAxB,IAAyCS,EAAzC,QAE5BZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACXH,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACEe,KAAMN,EACNO,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCmBLC,MA9Cf,WAAe,IAAAC,EAKeC,mBAAS,MALxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKNK,EALMH,EAAA,GAKEI,EALFJ,EAAA,GAQbK,oBAAU,WACRC,KACA,IAEF,IAAMA,EAAU,eAAAjC,EAAA4B,OAAAM,EAAA,EAAAN,CAAAO,EAAA/B,EAAAgC,KAAG,SAAAC,IAAA,IAAAP,EAAA,OAAAK,EAAA/B,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIC,IADJ,OACXZ,EADWS,EAAAI,KAEjBZ,EAAUD,GAFO,wBAAAS,EAAAK,SAAAP,MAAH,yBAAArC,EAAA6C,MAAAC,KAAAC,YAAA,GAKVL,EAAW,WAEf,OAAOM,MADK,6DAEXC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAC,OAAEC,QAAQC,MAAMF,MAe1B,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVwB,EAbEA,EAAOhB,IAAI,SAAC2C,EAAOC,GAAR,OAClBvD,EAAAC,EAAAC,cAACsD,EAAD,CACE1C,IAAKwC,EAAMG,GACXA,GAAIH,EAAMG,GACV1D,MAAOuD,EAAMvD,MACbD,OAAQwD,EAAMI,mBACdjD,OAAQ6C,EAAM7C,OACdC,SAAU4C,EAAM5C,aAMc,eC/BhBiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.9e8ff78f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LineEllipsis from 'react-lines-ellipsis';\r\n\r\n\r\nfunction MoviePoster({poster, title}){\r\n  return <img className=\"Movie__Poster\"src={poster} alt={`${title} Movie Poster`}/>\r\n}\r\nMoviePoster.propTypes = {\r\n  poster:PropTypes.string.isRequired,\r\n  title:PropTypes.string.isRequired,\r\n}\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n  return(\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster poster={poster} title={title}/>\r\n      </div>\r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, i) => <span key={i} className=\"Movie__Genre\"> {genre} </span>)}\r\n        </div>\r\n        <p className=\"Movie__Synopsis\">\r\n          <LineEllipsis\r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis='...'\r\n            trimRight\r\n            basedOn='letters'\r\n          />\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster:PropTypes.string.isRequired,\r\n  genres:PropTypes.array.isRequired,\r\n  synopsis:PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Movie;\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nfunction App() {\n//lifCycle\n// Render: componentWillMount() -> render() -> componentDidMount()\n// update: componentWillReceiveProps -> shouldComponentUpdate()\n          // -> componentWillUpdate() -> render() -> componentDidUpdate()\n  const [movies, setMovies] = useState(null);\n\n  //componentDidMount\n  useEffect(()=>{\n    _getMovies();\n  },[]);\n\n  const _getMovies = async () => {\n    const movies = await _callAPI();\n    setMovies(movies);\n  }\n\n  const _callAPI = () => {\n    const url = \"https://yts.lt/api/v2/list_movies.json?sort_by=like_count\"\n    return fetch(url)\n    .then(res => res.json())\n    .then(json => json.data.movies)\n    .catch(e=>console.error(e));\n  }\n\n  const _renderMovies = () => {\n    return movies.map((movie, index) =>\n    <Movie\n      key={movie.id}\n      id={movie.id}\n      title={movie.title}\n      poster={movie.medium_cover_image}\n      genres={movie.genres}\n      synopsis={movie.synopsis}\n    />)\n  }\n\n  return (\n    <div className=\"App\">\n      {  movies ? _renderMovies() : \"Loading...\"}\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}